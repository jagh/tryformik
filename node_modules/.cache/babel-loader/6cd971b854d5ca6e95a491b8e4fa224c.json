{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/jagh/Documents/04_NucleusAI/05_web_samples_code/tryformik/src/index.js\",\n    _s = $RefreshSig$();\n\n// import React from 'react';\n// import { render } from 'react-dom';\n// import App from './App';\n//\n// render(<App />, document.body.appendChild(document.createElement('div')));\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Formik, Field, Form, useField, useFormikContext } from 'formik'; // import './styles.css';\n\nconst MyField = props => {\n  _s();\n\n  const {\n    values: {\n      textA,\n      textB\n    },\n    touched,\n    setFieldValue\n  } = useFormikContext();\n  const [field, meta] = useField(props);\n  React.useEffect(() => {\n    // set the value of textC, based on textA and textB\n    if (textA.trim() !== '' && textB.trim() !== '' && touched.textA && touched.textB) {\n      setFieldValue(props.name, `textA: ${textA}, textB: ${textB}`);\n    }\n  }, [textB, textA, touched.textA, touched.textB, setFieldValue, props.name]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", { ...props,\n      ...field\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), !!meta.touched && !!meta.error && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: meta.error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 42\n    }, this)]\n  }, void 0, true);\n};\n\n_s(MyField, \"LpryINBvLFgaBOyRH7AAvpvHHEQ=\", false, function () {\n  return [useFormikContext, useField];\n});\n\n_c = MyField;\n\nfunction App() {\n  // Note that we provide initalValues all 3 fields.\n  const initialValues = {\n    textA: '',\n    textB: '',\n    textC: ''\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initialValues,\n      onSubmit: async values => alert(JSON.stringify(values, null, 2)),\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"Dependent Formik Field Example\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          style: {\n            color: '#555'\n          },\n          children: \"This is an example of how to set the value of one field based on the current values of other fields in Formik v2. In form below, textC's value is set based on the current values of fields textA and textB.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"small\", {\n            children: /*#__PURE__*/_jsxDEV(\"em\", {\n              children: \"Instructions: enter values for textA, and textB, and then watch textC.\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"textA\", /*#__PURE__*/_jsxDEV(Field, {\n              name: \"textA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"textB\", /*#__PURE__*/_jsxDEV(Field, {\n              name: \"textB\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 72,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: [\"textC\", /*#__PURE__*/_jsxDEV(MyField, {\n              name: \"textC\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 16\n      },\n      children: [\"Notice the following:\", /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"textC's value is set after fields textA and textB have been touched and if they are not empty.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"textC is \", /*#__PURE__*/_jsxDEV(\"i\", {\n            children: \"still\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 22\n          }, this), \" editable after being set programmatically. However, the value will be overwritten if/whenever there are (new) changes to textA and textB. This is because of the dependency array in our custom field's React.useEffect; it only runs when textA or textB change or have been touched. Since Formik's `setFieldValue` is equivalent between renders and so is the field's name prop, this works as expected. You could alter this overrwriting behavior by keeping track of whether textC was been updated by field.onChange or useEffect. This might be very useful if you want to alert the end user that their changes to textC will be lost.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_c2 = App;\nconst rootElement = document.getElementById('root');\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 108,\n  columnNumber: 17\n}, this), rootElement);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MyField\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/home/jagh/Documents/04_NucleusAI/05_web_samples_code/tryformik/src/index.js"],"names":["React","ReactDOM","Formik","Field","Form","useField","useFormikContext","MyField","props","values","textA","textB","touched","setFieldValue","field","meta","useEffect","trim","name","error","App","initialValues","textC","alert","JSON","stringify","color","marginTop","rootElement","document","getElementById","render"],"mappings":"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","sourcesContent":["// import React from 'react';\n// import { render } from 'react-dom';\n// import App from './App';\n//\n// render(<App />, document.body.appendChild(document.createElement('div')));\n\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Formik, Field, Form, useField, useFormikContext } from 'formik';\n// import './styles.css';\n\nconst MyField = (props) => {\n  const {\n    values: { textA, textB },\n    touched,\n    setFieldValue,\n  } = useFormikContext();\n  const [field, meta] = useField(props);\n\n  React.useEffect(() => {\n    // set the value of textC, based on textA and textB\n    if (\n      textA.trim() !== '' &&\n      textB.trim() !== '' &&\n      touched.textA &&\n      touched.textB\n    ) {\n      setFieldValue(props.name, `textA: ${textA}, textB: ${textB}`);\n    }\n  }, [textB, textA, touched.textA, touched.textB, setFieldValue, props.name]);\n\n  return (\n    <>\n      <input {...props} {...field} />\n      {!!meta.touched && !!meta.error && <div>{meta.error}</div>}\n    </>\n  );\n};\n\nfunction App() {\n  // Note that we provide initalValues all 3 fields.\n  const initialValues = { textA: '', textB: '', textC: '' };\n  return (\n    <div className=\"App\">\n      <Formik\n        initialValues={initialValues}\n        onSubmit={async (values) => alert(JSON.stringify(values, null, 2))}\n      >\n        <div className=\"section\">\n          <h1>Dependent Formik Field Example</h1>\n          <p style={{ color: '#555' }}>\n            This is an example of how to set the value of one field based on the\n            current values of other fields in Formik v2. In form below, textC's\n            value is set based on the current values of fields textA and textB.\n          </p>\n          <div>\n            <small>\n              <em>\n                Instructions: enter values for textA, and textB, and then watch\n                textC.\n              </em>\n            </small>\n          </div>\n          <Form>\n            <label>\n              textA\n              <Field name=\"textA\" />\n            </label>\n            <label>\n              textB\n              <Field name=\"textB\" />\n            </label>\n            <label>\n              textC\n              <MyField name=\"textC\" />\n            </label>\n            <button type=\"submit\">Submit</button>\n          </Form>\n        </div>\n      </Formik>\n      <div style={{ marginTop: 16 }}>\n        Notice the following:\n        <ul>\n          <li>\n            textC's value is set after fields textA and textB have been touched\n            and if they are not empty.\n          </li>\n          <li>\n            textC is <i>still</i> editable after being set programmatically.\n            However, the value will be overwritten if/whenever there are (new)\n            changes to textA and textB. This is because of the dependency array\n            in our custom field's React.useEffect; it only runs when textA or\n            textB change or have been touched. Since Formik's `setFieldValue` is\n            equivalent between renders and so is the field's name prop, this\n            works as expected. You could alter this overrwriting behavior by\n            keeping track of whether textC was been updated by field.onChange or\n            useEffect. This might be very useful if you want to alert the end\n            user that their changes to textC will be lost.\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nconst rootElement = document.getElementById('root');\nReactDOM.render(<App />, rootElement);\n"]},"metadata":{},"sourceType":"module"}